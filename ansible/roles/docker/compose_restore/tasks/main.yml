---
- name: Tear down {{ stack_name }} Docker Compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ user_home }}/{{ stack_name }}"
    state: absent

- name: Read the {{ stack_name }} compose.yml file
  slurp:
    src: "{{ user_home }}/{{ stack_name }}/compose.yml"
  register: compose_file

- name: Parse the {{ stack_name }} compose.yml file
  set_fact:
    compose_content: "{{ compose_file.content | b64decode | from_yaml }}"

- name: Extract {{ stack_name }} service names
  set_fact:
    service_names: "{{ compose_content.services.keys() | list }}"

- name: Restore most recent Docker Volume backups for {{ stack_name }}
  block:

    - name: Check if {{ stack_name }} volumes exist
      stat:
        path: "{{ user_home }}/{{ stack_name }}/{{ item }}"
      loop: "{{ service_names }}"
      register: volume_exists
      loop_control:
        label: "{{ item }}"

    - name: Ensure at least one backup exists for {{ stack_name }} volumes
      stat:
        path: "{{ user_home }}/backups/docker/{{ stack_name }}/{{ item }}"
      loop: "{{ service_names }}"
      register: backup_files
      loop_control:
        label: "{{ item }}"

    - name: Find all backup volumes for {{ stack_name }}
      find:
        paths: "{{ user_home }}/backups/docker/{{ stack_name }}/{{ item }}"
        patterns: "{{ item }}-backup-*"
        recurse: no
        file_type: directory
      when: backup_files
      register: backup_volumes
      loop: "{{ service_names }}"
      loop_control:
        label: "{{ item }}"

    - name: Initialize newest_backup_files dictionary
      set_fact:
        newest_backup_files: {}

    - name: Find the most recent backup for each {{ stack_name }} volume
      set_fact:
        newest_backup_files: "{{ newest_backup_files | combine({ item.item: (item.files | sort(attribute='mtime', reverse=True) | first).path }) }}"
      loop: "{{ backup_volumes.results }}"
      when: item.files | length > 0
      loop_control:
        label: "{{ item.item }}"

    # - name: Display newest backup files (debugging purposes)
    #   debug:
    #     msg: "{{ newest_backup_files.frontend | basename }}"

    - name: Fail if no backup files are found for {{ stack_name }}
      fail:
        msg: "No backup files found for {{ stack_name }}"
      when: newest_backup_files is not defined or newest_backup_files == ""

    # - name: Display volume names (debugging purposes)
    #   debug:
    #     msg: "{{ volume_exists.results }}"

    - name: Remove existing volumes for {{ stack_name }}
      command: "rm -r {{ user_home }}/{{ stack_name }}/{{ item.item }}"
      when: item.stat.exists
      loop: "{{ volume_exists.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Copy the newest backup files for {{ stack_name }} to docker mount point
      copy:
        src: "{{ item.value }}"
        dest: "{{ user_home }}/{{ stack_name }}"
        remote_src: yes
      with_dict: "{{ newest_backup_files }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Rename the backup directory for {{ stack_name }}
      command: mv {{ user_home }}/{{ stack_name }}/{{ item.value | basename }} {{ user_home }}/{{ stack_name }}/{{ item.key }}
      args:
        creates: "{{ user_home }}/{{ stack_name }}/{{ item.key }}"
      with_dict: "{{ newest_backup_files }}"
      loop_control:
        label: "{{ item.key }}"

- name: Deploy {{ stack_name }} Docker Compose stack
  community.docker.docker_compose_v2:
    project_src: "{{ user_home }}/{{ stack_name }}"
    state: present
